#!/bin/bash

help_msg='hooroo - Synchronise your pacman and flatpak packages with files

Usage:
  hooroo <command> [options]

Commands:
  apply		Bring system packages up to date with packages file
  save		Bring packages file up to date with system packages

Options:
  -h, --help	Show this help
  -m, --mode {all, flatpak, pacman}
  		What package managers to synchronise (default: all)
  --noconfirm	Do not ask for confirmation when upgrading packages'

# Find who the actual user is
if [[ -n $SUDO_USER ]]; then
	user=$SUDO_USER
elif [[ -n $DOAS_USER ]]; then
	user=$DOAS_USER
else
	user=$USER
fi

# Find user's home directory from passwd file
home=$(getent passwd $user | cut -d: -f6)

# Set XDG config directory
if [[ -z $XDG_CONFIG_HOME ]]; then
	XDG_CONFIG_HOME=$home/.config
fi

# Set default hooroo directory location
hooroo_dir=$XDG_CONFIG_HOME/hooroo

# Loop through args until there are no more
while [[ $# -gt 0 ]]; do

	# Check for commands and options
	case $1 in
		apply)
			cmd=apply
			shift	;;
		-h)
			echo "$help_msg"
			exit 0	;;
		--help)
			echo "$help_msg"
			exit 0	;;
		-m)
			shift
			mode=$1
			shift	;;
		--mode)
			shift
			mode=$1
			shift	;;
		--noconfirm)
			noconfirm=true
			shift	;;
		save)
			cmd=save
			shift	;;
		*)
			shift	;;
	esac

done

# Read mode argument to set pacman_mode and flatpak_mode
if [[ -z $mode ]]; then
	pacman_mode=true
	flatpak_mode=true
elif [[ $mode = pacman ]]; then
	pacman_mode=true
elif [[ $mode = flatpak ]]; then
	flatpak_mode=true
fi

# Check that pacman exists if pacman_mode was set
if [[ -n $pacman_mode && ! -x $(command -v pacman) ]]; then
	unset pacman_mode
fi

# Check that flatpak exists if flatpak_mode was set
if [[ -n $flatpak_mode && ! -x $(command -v flatpak) ]]; then
	unset flatpak_mode
fi

# Define pacman specific variables
if [[ -n $pacman_mode ]]; then
	pacman_cmd=pacman
	pacman_file=$hooroo_dir/pacman-packages.txt

	# Find if AUR helper is installed
	if [[ -x $(command -v paru) ]]; then
		pacman_cmd=paru
	elif [[ -x $(command -v yay) ]]; then
		pacman_cmd=yay
	fi
fi

# Define flatpak specific variable
if [[ -n $flatpak_mode ]]; then
	flatpak_file=$hooroo_dir/flatpak-packages.txt
fi

# Check for command
case $cmd in
	apply)
		# Pacman specific commands
		if [[ -n $pacman_mode ]]; then
			installed_packages=$($pacman_cmd -Qqe)
			packages=$(cat $pacman_file)

			if [[ -n $noconfirm ]]; then
				confirm=--noconfirm
			fi

			# Install packages in the packages file that aren't explicitly installed
			pacman_installs=$(diff --old-line-format= --unchanged-line-format= <(echo "$installed_packages") <(echo "$packages"))
			if [[ -n $pacman_installs ]]; then
				$pacman_cmd -Sy $confirm $pacman_installs
			fi

			# Uninstall explicitly installed packages not in the packages file, and unneeded dependencies
			pacman_uninstalls=$(diff --old-line-format= --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $pacman_uninstalls ]]; then
				$pacman_cmd -Rsn $confirm $pacman_uninstalls
			fi
		fi

		# Flatpak specific commands
		if [[ -n $flatpak_mode ]]; then
			installed_flatpaks=$(flatpak list --app --columns=ref)
			flatpaks=$(cat $flatpak_file)

			if [[ -n $noconfirm ]]; then
				interactive=--noninteractive
			fi

			# Install packages in the packages file that aren't explicitly installed
			flatpak_installs=$(diff --old-line-format= --unchanged-line-format= <(echo "$installed_flatpaks") <(echo "$flatpaks"))
			if [[ -n $flatpak_installs ]]; then
				flatpak install $interactive $flatpak_installs
			fi

			# Uninstall explicitly installed flatpaks not in the flatpaks file, and unneeded dependencies
			flatpak_uninstalls=$(diff --old-line-format= --unchanged-line-format= <(echo "$flatpaks") <(echo "$installed_flatpaks"))
			if [[ -n $flatpak_uninstalls ]]; then
				flatpak uninstall $interactive $flatpak_uninstalls
			fi

		fi
		;;
	save)
		# Create hooroo directory if it doesn't exist
		if [[ ! -d $hooroo_dir ]]; then
			mkdir -p $hooroo_dir
			echo Created new package files directory at $hooroo_dir
		fi

		# Pacman specific commands
		if [[ -n $pacman_mode ]]; then
			# Create pacman packages file if it doesn't exist
			if [[ ! -f $pacman_file ]]; then
				touch $pacman_file
				echo Created new pacman packages file at $pacman_file
			fi

			installed_packages=$($pacman_cmd -Qqe)
			packages=$(cat $pacman_file)

			# Only write pacman package list to file if something's changed
			pacman_diff=$(diff --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $pacman_diff ]]; then
				$pacman_cmd -Qqe > $pacman_file
			fi
		fi

		# Flatpak specific commands
		if [[ -n $flatpak_mode ]]; then
			# Create flatpak apps file if it doesn't exist
			if [[ ! -f $flatpak_file ]]; then
				touch $flatpak_file
				echo Created new flatpak packages file at $flatpak_file
			fi

			installed_flatpaks=$(flatpak list --app --columns=ref)
			flatpaks=$(cat $flatpak_file)
		
			# Only write flatpak app list to file if something's changed
			flatpak_diff=$(diff --unchanged-line-format= <(echo "$flatpaks") <(echo "$installed_flatpaks"))
			if [[ -n $flatpak_diff ]]; then
				flatpak list --app --columns=ref > $flatpak_file
			fi
		fi
		;;
	*)
		echo "$help_msg"
		;;
esac

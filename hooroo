#!/bin/bash

help_msg='hooroo - Synchronise your packages with a file

Usage:
  hooroo <command> [options]

Commands:
  apply		Bring system packages up to date with packages file
  save		Bring packages file up to date with system packages

Options:
  -h, --help		Show this help
  -l, --location	The file or directory with package lists
  -m, --mode {all, apt, flatpak, pacman}
			What package manager to synchronise (default: all)
  --noconfirm, --yes	Do not ask for confirmation when upgrading packages'

# Find who the actual user is
if [[ -n $SUDO_USER ]]; then
	user=$SUDO_USER
elif [[ -n $DOAS_USER ]]; then
	user=$DOAS_USER
else
	user=$USER
fi

# Find user's home directory from passwd file
home=$(getent passwd "$user" | cut -d: -f6)

# Set default hooroo directory location
hooroo_dir=${XDG_CONFIG_HOME:-$home/.config}/hooroo

# Loop through args until there are no more
while (( $# > 0 )); do
	# Check for commands and options
	case $1 in
		apply)
			cmd=apply
			shift	;;
		save)
			cmd=save
			shift	;;
		-h | --help)
			echo "$help_msg"
			exit 0	;;
		-l | --location)
			shift
			location=$1
			shift	;;
		-m | --mode)
			shift
			mode=$1
			shift	;;
		--noconfirm)
			noconfirm=true
			shift	;;
		--yes)
			noconfirm=true
			shift	;;
		*)
			shift	;;
	esac

done

# Set mode to all if not set
if [[ -z $mode ]]; then
	mode=all
fi

# Set apt mode if mode is all or apt and apt-get exists
if [[ ($mode = all || $mode = apt) && -x $(command -v apt-get) ]]; then
	apt_mode=true
	(( mode_count++ ))
fi

# Set flatpak mode if mode is all or flatpak and flatpak exists
if [[ ($mode = all || $mode = flatpak) && -x $(command -v flatpak) ]]; then
	flatpak_mode=true
	(( mode_count++ ))
fi

# Set pacman variables if mode is all or pacman and pacman exists
if [[ ($mode = all || $mode = pacman) && -x $(command -v pacman) ]]; then
	pacman_mode=true
	pacman_cmd=pacman
	(( mode_count++ ))

	# Use AUR helper if installed
	if [[ -x $(command -v paru) ]]; then
		pacman_cmd=paru
	elif [[ -x $(command -v yay) ]]; then
		pacman_cmd=yay
	fi
fi

# Change hooroo directory if using multiple modes and location was given
if [[ $mode_count -gt 1 && -n $location ]]; then
	hooroo_dir=$location
	unset location
fi

# Apt mode specific variable
if [[ -n $apt_mode ]]; then
	# Use custom apt file if location was given
	if [[ -z $location ]]; then
		apt_file=$hooroo_dir/apt-packages.txt
	else
		apt_file=$location
	fi
fi

# Flatpak mode specific variable
if [[ -n $flatpak_mode ]]; then
	# Use custom flatpak file if location was given
	if [[ -z $location ]]; then
		flatpak_file=$hooroo_dir/flatpak-packages.txt
	else
		flatpak_file=$location
	fi
fi

# Pacman mode specific variable
if [[ -n $pacman_mode ]]; then
	# Use custom pacman file if location was given
	if [[ -z $location ]]; then
		pacman_file=$hooroo_dir/pacman-packages.txt
	else
		pacman_file=$location
	fi
fi

# Check for command
case $cmd in
	apply)
		# Exit if hooroo directory doesn't exist
		if [[ ! -d $hooroo_dir ]]; then
			echo "hooroo: $hooroo_dir: No such directory"
			exit 1
		fi

		# Apt specific commands
		if [[ -n $apt_mode ]]; then
			# Exit if apt file doesn't exist
			if [[ ! -f $apt_file ]]; then
				echo "hooroo: $apt_file: No such file"
				exit 1
			fi

			installed_packages=$(apt-mark showmanual) # Only show explicitly installed packages
			packages=$(cat "$apt_file")

			if [[ -n $noconfirm ]]; then
				yes=--yes
			fi

			# Install packages in the apt packages file that aren't explicitly installed
			installs=$(diff --old-line-format= --unchanged-line-format= <(echo "$installed_packages") <(echo "$packages"))
			if [[ -n $installs ]]; then
				apt-get update 2>/dev/null && apt-get install $yes "$installs" 2>/dev/null

				# Exit if there was an error installing apt packages
				if (( $? > 0 )); then
					echo hooroo: Error installing apt packages
					exit 1
				fi
			fi

			# Remove explicitly installed packages not in the apt packages file, and unneeded dependencies
			removes=$(diff --old-line-format= --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $removes ]]; then
				apt-get autoremove --purge $yes "$removes" 2>/dev/null

				# Exit if there was an error removing apt packages
				if (( $? > 0 )); then
					echo hooroo: Error removing apt packages
					exit 1
				fi
			fi
		fi

		# Flatpak specific commands
		if [[ -n $flatpak_mode ]]; then
			# Exit if flatpak file doesn't exist
			if [[ ! -f $flatpak_file ]]; then
				echo "hooroo: $flatpak_file: No such file"
				exit 1
			fi

			installed_packages=$(flatpak list --app --columns=ref) # Only show apps, not runtimes
			packages=$(cat "$flatpak_file")

			if [[ -n $noconfirm ]]; then
				interactive=--noninteractive
			fi

			# Install apps in the flatpak packages file that aren't explicitly installed
			installs=$(diff --old-line-format= --unchanged-line-format= <(echo "$installed_packages") <(echo "$packages"))
			if [[ -n $installs ]]; then
				flatpak install $interactive "$installs" 2>/dev/null

				# Exit if there was an error installing flatpak packages
				if (( $? > 0 )); then
					echo hooroo: Error installing flatpak packages
					exit 1
				fi
			fi

			# Remove explicitly installed apps not in the flatpak packages file, and unneeded dependencies
			removes=$(diff --old-line-format= --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $removes ]]; then
				flatpak remove $interactive "$removes" 2>/dev/null

				# Exit if there was an error removing flatpak packages
				if (( $? > 0 )); then
					echo hooroo: Error removing flatpak packages
					exit 1
				fi
			fi

		fi

		# Pacman specific commands
		if [[ -n $pacman_mode ]]; then
			# Exit if pacman file doesn't exist
			if [[ ! -f $pacman_file ]]; then
				echo "hooroo: $pacman_file: No such file"
				exit 1
			fi

			installed_packages=$($pacman_cmd -Qqe) # Only show explicitly installed packages
			packages=$(cat "$pacman_file")

			if [[ -n $noconfirm ]]; then
				confirm=--noconfirm
			fi

			# Install packages in the pacman packages file that aren't explicitly installed
			installs=$(diff --old-line-format= --unchanged-line-format= <(echo "$installed_packages") <(echo "$packages"))
			if [[ -n $installs ]]; then
				$pacman_cmd -Sy $confirm "$installs" 2>/dev/null

				# Exit if there was an error installing pacman packages
				if (( $? > 0 )); then
					echo hooroo: Error installing pacman packages
					exit 1
				fi
			fi

			# Remove explicitly installed packages not in the pacman packages file, and unneeded dependencies
			removes=$(diff --old-line-format= --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $removes ]]; then
				$pacman_cmd -Rsn $confirm "$removes" 2>/dev/null

				# Exit if there was an error removing pacman packages
				if (( $? > 0 )); then
					echo hooroo: Error removing pacman packages
					exit 1
				fi
			fi
		fi
		;;
	save)
		# Create hooroo directory if it doesn't exist
		if [[ ! -d $hooroo_dir ]]; then
			if [[ ! -e $hooroo_dir ]]; then
				mkdir -p "$hooroo_dir"
				echo "hooroo: Created new directory '$hooroo_dir'"
			else
				echo "hooroo: Cannot create directory '$hooroo_dir': File exists"
				exit 1
			fi
		fi

		# Apt specific commands
		if [[ -n $apt_mode ]]; then
			# Create apt packages file if it doesn't exist
			if [[ ! -f $apt_file ]]; then
				if [[ ! -e $apt_file ]]; then
					touch "$apt_file"
					echo "hooroo: Created new apt file '$apt_file'"
				else
					echo "hooroo: Cannot create apt file '$apt_file': File exists"
					exit 1
				fi
			fi

			installed_packages=$(apt-mark showmanual) # Only show explicitly installed packages
			packages=$(cat "$apt_file")

			# Only write apt package list to file if something's changed
			diffs=$(diff --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $diffs ]]; then
				apt-mark showmanual > "$apt_file"
			fi
		fi

		# Flatpak specific commands
		if [[ -n $flatpak_mode ]]; then
			# Create flatpak apps file if it doesn't exist
			if [[ ! -f $flatpak_file ]]; then
				if [[ ! -e $flatpak_file ]]; then
					touch "$flatpak_file"
					echo "hooroo: Created new flatpak file '$flatpak_file'"
				else
					echo "hooroo: Cannot create flatpak file '$flatpak_file': File exists"
					exit 1
				fi
			fi

			installed_packages=$(flatpak list --app --columns=ref) # Only show apps, not runtimes
			packages=$(cat "$flatpak_file")
		
			# Only write flatpak package list to file if something's changed
			diffs=$(diff --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $diffs ]]; then
				flatpak list --app --columns=ref > "$flatpak_file"
			fi
		fi

		# Pacman specific commands
		if [[ -n $pacman_mode ]]; then
			# Create pacman packages file if it doesn't exist
			if [[ ! -f $pacman_file ]]; then
				if [[ ! -e $pacman_file ]]; then
					touch "$pacman_file"
					echo "hooroo: Created new pacman file '$pacman_file'"
				else
					echo "hooroo: Cannot create pacman file '$pacman_file': File exists"
					exit 1
				fi
			fi

			installed_packages=$($pacman_cmd -Qqe) # Only show explicitly installed packages
			packages=$(cat "$pacman_file")

			# Only write pacman package list to file if something's changed
			diffs=$(diff --unchanged-line-format= <(echo "$packages") <(echo "$installed_packages"))
			if [[ -n $diffs ]]; then
				$pacman_cmd -Qqe > "$pacman_file"
			fi
		fi
		;;
	*)
		echo "$help_msg"
		;;
esac
